{"version":3,"sources":["App.js","Components/Buttons.js","Components/Input.js","reportWebVitals.js","index.js"],"names":["App","useState","idArray","setidArray","input","setInput","evalTracker","setEvalTracker","onClickFunc","val","length","test","console","log","inputCharArray","split","join","eval","className","Buttons","id","map","value","onClick","style","gridArea","Input","inputText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b422e27.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport './App.css';\nimport Buttons from './Components/Buttons';\nimport Input from './Components/Input';\n\n\nfunction App() {\n  const [idArray, setidArray] = useState([\n    [\"one\", 1],\n    [\"two\", 2] ,\n    [\"three\", 3],\n    [\"four\", 4],\n    [\"five\", 5],\n    [\"six\", 6],\n    [\"seven\", 7],\n    [\"eight\", 8],\n    [\"nine\", 9],\n    [\"add\", \"+\"],\n    [\"subtract\", \"-\"],\n    [\"divide\", \"/\"],\n    [\"multiply\", \"x\"],\n    [\"clear\", \"AC\"],\n    [\"zero\", 0],\n    [\"decimal\", \".\"],\n    [\"equals\", \"=\"],\n])\n  const [input, setInput] = useState([0])\n  const [evalTracker, setEvalTracker] = useState([0])\n\n  let onClickFunc = (val) => {\n    if (input.length < 16) {\n      if ((/\\D/).test(val) && ((/[-*\\/\\+\\.]$/).test(input))) {\n        console.log(\"this is incorrect\")\n    }\n    else if (val === \"=\" && (/\\D$/).test(input)) {\n      console.log(\"incorrect\")\n    }\n\n    if ((/[*x\\/]/).test(val) && (/[-*x\\/\\+]$/).test(input)) {\n      if (input.length > 1) {\n      let inputCharArray = input.split('');\n      inputCharArray[inputCharArray.length -1] = ''\n      setInput([...inputCharArray, val].join(''))\n      }\n      else {\n        console.log('help')\n      }\n    }\n    else if (val === \"AC\") {\n      setInput([0])\n      setEvalTracker([0])\n    }\n    else if (val === \"+\" && (/\\+$/).test(input)) {\n      console.log(\"incorrect\")\n    }\n    else if(val === \"x\") {\n      setInput([...input, \"*\"].join(''));\n    }\n    else if (input === \"-\" && (/[-x\\/=\\+]/).test(val)) {\n      console.log(\"this is incorrect\")\n    }\n    else if (val === \"-\" && (/[-\\+\\/x=]$/).test(input)) {\n      console.log(\"incorrect\")\n    }\n    else if (val === \".\" && (/(\\d\\.)$/).test(input)) {\n      console.log(\"this is incorrect\")\n    }\n    else if (val === \".\" && (/(\\d\\.\\d+)$/).test(input)) {\n      console.log(\"this is incorrect\")\n    }\n    else if (input[0] === 0) {\n      setInput([val])\n    }\n    else if (input === 0 && (/[x\\/=]/).test(val)) {\n      console.log(\"this is incorrect\")\n    }\n    else if (val === \"=\" && ((/\\d$/).test(input))) {\n      setInput([...input].join(''));\n      setInput([eval((input))]);\n      setEvalTracker([1])\n    }\n    else if (evalTracker[0] === 1 && (/[\\d\\.]/).test(val)) {\n      setInput([val])\n      setEvalTracker([0])\n      // if equals has already been pressed, and another val 1234567890 has been entered, change input to val\n    }\n    else {\n        setInput([...input, val].join(''));\n        setEvalTracker([0])\n    }\n  }\n  else {\n    console.log(\"LENGTH TOO LONG\")\n    setInput(\"LENGTH IS TOO LONG\")\n    if (val === \"AC\") {\n      setInput([0])\n    }\n  }\n}\n\n  return (\n    <div className=\"App\">\n      <Input input={input} />\n     <Buttons idArray={idArray} onClickFunc={onClickFunc}/>\n    </div>\n  );\n}\n\nexport default App;\n","\nconst Buttons = ({ idArray, onClickFunc }) => {\n\n    return (\n        <div id=\"button-grid\">\n            <div id=\"header\"></div>\n            {idArray.map((value) => (\n            <button \n            id={value[0]} \n            className=\"button btn\"\n            key={value[0]}\n            onClick={() => onClickFunc(value[1])}\n            style={{gridArea : value[0]}}\n            >\n                {value[1]}\n                </button>))}\n        </div>\n    )\n}\n\nexport default Buttons\n","const Input = ({ input, inputText }) => {\n    return (\n        <div id=\"display-div\">\n            <p id=\"display\">{input}</p>\n        </div>\n    )\n}\n\nexport default Input\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}